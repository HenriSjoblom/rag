from pydantic import BaseModel, Field
from typing import List, Optional, Dict

class RetrievalRequest(BaseModel):
    """Request model expected from the chat-api-service."""
    query: str = Field(..., min_length=1, description="The user query to search for.")


class RetrievalResponse(BaseModel):
    """Response model sent back to the chat-api-service."""
    # List of relevant text chunks retrieved from the vector database
    chunks: List[str] = Field(..., description="List of relevant text chunks.")


class GenerationRequest(BaseModel):
    """
    Request model for initiating the text generation process.
    It includes the user's original query and the relevant context
    retrieved by the retrieval service.
    """
    query: str = Field(
        ...,
        min_length=1,
        description="The original user query that needs an answer."
    )
    context_chunks: List[str] = Field(
        ...,
        description="A list of relevant text chunks retrieved from the knowledge base (vector database) that should be used as context for generating the answer."
    )


class GenerationResponse(BaseModel):
    """
    Response model containing the final answer generated by the
    Large Language Model (LLM) based on the provided query and context.
    """
    answer: str = Field(
        ..., # Required field
        description="The generated answer text produced by the LLM."
    )

class ChatRequest(BaseModel):
    """Request model for initiating a chat interaction."""
    user_id: str = Field(..., description="Unique identifier for the user session.")
    message: str = Field(..., min_length=1, description="The user's message.")